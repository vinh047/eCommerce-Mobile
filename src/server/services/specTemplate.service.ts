import prisma from "@/lib/prisma";
import {
  SpecTemplate,
  ProductSpec,
  VariantSpec,
  ProductSpecOption,
  ProductBucket,
  VariantSpecOption,
  VariantBucket,
} from "@prisma/client";
import { brandService } from "./brand.service"; // Import Brand Service

// ====================================================================
// === TYPE DEFINITIONS ===
// ====================================================================

// 1. ƒê·ªãnh nghƒ©a ki·ªÉu cho Brand khi ƒë∆∞·ª£c d√πng l√†m Filter Field
type BrandFilterField = {
  id: number;
  name: string;
  slug: string;
  type: "brand";
  options: { id: number; name: string; slug: string }[];
  // C√°c tr∆∞·ªùng sau ƒë·∫£m b·∫£o Brand Field t∆∞∆°ng th√≠ch v·ªõi ProductSpec/VariantSpec
  code: "brand";
  label: "Th∆∞∆°ng hi·ªáu";
  displayOrder: number;
};

// 2. ƒê·ªãnh nghƒ©a ki·ªÉu cho c√°c Spec chung (ƒê√£ g·ªôp Brand)
export type FilterSpec =
  | BrandFilterField
  | (ProductSpec & {
      options: ProductSpecOption[];
      buckets: ProductBucket[];
      type: "product";
    })
  | (VariantSpec & {
      options: VariantSpecOption[];
      buckets: VariantBucket[];
      type: "variant";
    });

// 3. Ki·ªÉu d·ªØ li·ªáu cu·ªëi c√πng cho Response (Ch·ªâ ch·ª©a tr∆∞·ªùng fields ƒë√£ g·ªôp)
export type SpecTemplateWithMergedFilters = Omit<
  SpecTemplate,
  "productSpecs" | "variantSpecs"
> & {
  fields: FilterSpec[];
};

// ====================================================================
// === SERVICE LOGIC ===
// ====================================================================

export const specTemplateService = {
  /**
   * L·∫•y SpecTemplate, g·ªôp ProductSpec, VariantSpec v√† Brand v√†o m·ªôt m·∫£ng 'fields'.
   * @param categoryId ID c·ªßa Category
   * @returns Promise<SpecTemplateWithMergedFilters | null>
   */
  async getFiltersByCategoryId(
    categoryId: number
  ): Promise<SpecTemplateWithMergedFilters | null> {
    // --- 1. Truy v·∫•n SpecTemplate v√† Specs ---
    const templateWithFilters = await prisma.specTemplate.findFirst({
      where: { categoryId },
      include: {
        productSpecs: {
          orderBy: { displayOrder: "asc" },
          include: {
            // üî• TH√äM SORT CHO OPTIONS V√Ä BUCKETS
            options: { orderBy: { sortOrder: "asc" } },
            buckets: { orderBy: { sortOrder: "asc" } },
          },
        },
        variantSpecs: {
          orderBy: { displayOrder: "asc" },
          include: {
            // üî• TH√äM SORT CHO OPTIONS V√Ä BUCKETS
            options: { orderBy: { sortOrder: "asc" } },
            buckets: { orderBy: { sortOrder: "asc" } },
          },
        },
      },
    });

    if (!templateWithFilters) {
      return null;
    }

    // --- 2. Truy v·∫•n Brands ---
    // G·ªçi Brand Service ƒë·ªÉ l·∫•y Brands li√™n quan
    const rawBrands = await brandService.getBrandsByCategoryId(categoryId);

    // --- 3. T·∫†O FILTER FIELD CHO BRAND V√Ä ƒê∆ØA L√äN ƒê·∫¶U ---
    const brandOptions = rawBrands.map((b) => ({
      id: b.id,
      name: b.name,
      slug: b.slug,
    }));

    const brandField: BrandFilterField = {
      id: 0, // ID c·ªë ƒë·ªãnh cho Brand Filter
      code: "brand",
      label: "Th∆∞∆°ng hi·ªáu",
      type: "brand",
      displayOrder: -1, // ƒê·∫£m b·∫£o Brand lu√¥n l√™n ƒë·∫ßu
      options: brandOptions,
      // üî• ƒê√É KH·∫ÆC PH·ª§C L·ªñI: Th√™m c√°c tr∆∞·ªùng 'name' v√† 'slug' b·ªã thi·∫øu
      name: "brand-filter-root",
      slug: "brand-filter-root",
    };

    // --- 4. G·ªòP V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU C·ª¶A SPECS ---
    const { productSpecs, variantSpecs, ...templateData } = templateWithFilters;

    // G·∫Øn th√™m tr∆∞·ªùng 'type' v√† g·ªôp ProductSpec + VariantSpec
    const specFields: FilterSpec[] = [
      ...productSpecs.map((spec) => ({
        ...spec,
        type: "product" as const,
        buckets: spec.buckets || [],
      })),
      ...variantSpecs.map((spec) => ({
        ...spec,
        type: "variant" as const,
        buckets: spec.buckets || [],
      })),
    ];

    // --- 5. G·ªòP T·∫§T C·∫¢ FIELDS V√Ä S·∫ÆP X·∫æP ---
    const allFields: FilterSpec[] = [brandField, ...specFields];

    // S·∫Øp x·∫øp: BrandField c√≥ displayOrder: -1 s·∫Ω l√™n ƒë·∫ßu
    allFields.sort((a, b) => a.displayOrder - b.displayOrder);

    // --- 6. Tr·∫£ v·ªÅ k·∫øt qu·∫£ cu·ªëi c√πng ---
    return {
      ...templateData,
      fields: allFields,
    } as SpecTemplateWithMergedFilters;
  },
};
