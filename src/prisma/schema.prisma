// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



/**
 * ==========================
 * ENUMS
 * ==========================
 */
enum AccountStatus {
  active
  blocked
  deleted
}

enum CouponType {
  fixed
  percentage
}

enum OrderStatus {
  pending
  confirmed
  processing
  shipped
  delivered
  completed
  cancelled
  returned
  refunded
}

enum PaymentStatus {
  pending
  paid
  failed
}

enum InventoryTxnType {
  in
  out
  adjustment
  reservation
  release
}

enum DeviceStatus {
  in_stock
  sold
  reserved
  returned
  locked
}

enum PaymentTxnStatus {
  pending
  success
  failed
  refunded
}

enum RmaType {
  return
  exchange
  warranty
}

enum RmaStatus {
  pending
  approved
  rejected
  completed
  cancelled
}

enum ControlType {
  select
  multiselect
}

enum DataType {
  string
  number
  boolean
}

enum ValueType {
  discrete
  range
}

// Banner
model Banner {
  id           Int     @id @default(autoincrement())
  image        String  @map("image_url") @db.VarChar(255) // URL của ảnh banner
  altText      String? @map("alt_text") @db.VarChar(255) // Văn bản thay thế cho ảnh (tốt cho SEO)
  isActive     Boolean @default(true) @map("is_active") // Cờ để bật/tắt banner
  displayOrder Int     @default(0) @map("display_order") // Thứ tự hiển thị

  // --- Liên kết bắt buộc tới sản phẩm ---
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("banners")
}

/**
 * ==========================
 * USERS & ADDRESS
 * ==========================
 */
model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique @db.VarChar(255)
  passwordHash String        @map("password_hash") @db.VarChar(255)
  name         String?       @db.VarChar(255)
  avatar       String?       @db.VarChar(255)
  status       AccountStatus @default(active)
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamp(0)

  addresses Address[]
  cart      Cart?
  orders    Order[]
  reviews   Review[]

  @@index([email], map: "idx_users_email")
  @@map("users")
}

model Address {
  id        Int     @id @default(autoincrement())
  userId    Int     @map("user_id")
  line      String  @db.VarChar(255)
  phone     String? @db.VarChar(20)
  ward      String? @db.VarChar(100)
  district  String? @db.VarChar(100)
  province  String? @db.VarChar(100)
  isDefault Boolean @default(false) @map("is_default")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("address")
}

/**
 * ==========================
 * BRANDS, CATEGORIES, SPEC_TEMPLATES
 * ==========================
 */
model Brand {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  slug      String   @unique @db.VarChar(191)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  products Product[]
  coupons  Coupon[]

  @@index([slug], map: "idx_brands_slug")
  @@map("brands")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  slug      String   @unique @db.VarChar(191)
  parentId  Int?     @map("parent_id")
  isActive  Boolean  @default(true) @map("is_active")
  iconKey   String?  @map("icon_key") @db.VarChar(64)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryToCategory")

  products  Product[]
  templates SpecTemplate[]
  coupons   Coupon[]

  @@index([slug], map: "idx_categories_slug")
  @@index([parentId])
  @@map("categories")
}

// =================== SPEC TEMPLATE ===================
// ============== SPEC TEMPLATE ==============
model SpecTemplate {
  id         Int      @id @default(autoincrement())
  categoryId Int      @map("category_id")
  name       String   @db.VarChar(255)
  version    Int      @default(1)
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  // Relations
  category     Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  productSpecs ProductSpec[]
  variantSpecs VariantSpec[]

  @@index([categoryId, isActive])
  @@map("spec_templates")
}

// =================== PRODUCT SPECS ===================
model ProductSpec {
  id             Int         @id @default(autoincrement())
  specTemplateId Int         @map("spec_template_id")
  code           String      @db.VarChar(64)
  label          String      @db.VarChar(255)
  valueType      ValueType
  datatype       DataType
  unit           String?     @db.VarChar(32)
  filterable     Boolean     @default(false)
  control        ControlType
  isRequired     Boolean     @default(false)
  groupLabel     String?     @db.VarChar(128)
  displayOrder   Int         @default(0) @map("display_order")

  template SpecTemplate        @relation(fields: [specTemplateId], references: [id], onDelete: Cascade)
  options  ProductSpecOption[]
  buckets  ProductBucket[]
  values   ProductSpecValue[]

  @@unique([specTemplateId, code], map: "uq_product_specs_tmpl_code")
  @@index([specTemplateId], map: "idx_product_specs_template")
  @@map("product_specs")
}

model ProductSpecOption {
  id            Int    @id @default(autoincrement())
  productSpecId Int    @map("product_spec_id")
  value         String @db.VarChar(191)
  label         String @db.VarChar(255)
  sortOrder     Int    @default(0) @map("sort_order")

  spec ProductSpec @relation(fields: [productSpecId], references: [id], onDelete: Cascade)

  @@unique([productSpecId, value], map: "uq_product_spec_option_value")
  @@index([productSpecId], map: "idx_product_spec_option_spec")
  @@map("product_spec_options")
}

model ProductBucket {
  id            Int      @id @default(autoincrement())
  productSpecId Int      @map("product_spec_id")
  gt            Decimal? @db.Decimal(18, 6)
  lte           Decimal? @db.Decimal(18, 6)
  label         String   @db.VarChar(255)
  sortOrder     Int      @default(0) @map("sort_order")

  spec ProductSpec @relation(fields: [productSpecId], references: [id], onDelete: Cascade)

  @@unique([productSpecId, gt, lte], map: "uq_product_buckets_range")
  @@index([productSpecId], map: "idx_product_buckets_spec")
  @@map("product_buckets")
}

// =================== VARIANT SPECS ===================
model VariantSpec {
  id             Int         @id @default(autoincrement())
  specTemplateId Int         @map("spec_template_id")
  code           String      @db.VarChar(64) // color, storage, edition...
  label          String      @db.VarChar(255)
  valueType      ValueType
  datatype       DataType
  unit           String?     @db.VarChar(32)
  filterable     Boolean     @default(false)
  control        ControlType
  isRequired     Boolean     @default(false)
  isVariantKey   Boolean     @default(false) @map("is_variant_key")
  orderIndex     Int         @default(0) @map("order_index")
  groupLabel     String?     @db.VarChar(128)
  displayOrder   Int         @default(0) @map("display_order")

  template SpecTemplate        @relation(fields: [specTemplateId], references: [id], onDelete: Cascade)
  options  VariantSpecOption[]
  buckets  VariantBucket[]
  values   VariantSpecValue[]

  @@unique([specTemplateId, code], map: "uq_variant_specs_tmpl_code")
  @@index([specTemplateId], map: "idx_variant_specs_template")
  @@map("variant_specs")
}

model VariantSpecOption {
  id            Int    @id @default(autoincrement())
  variantSpecId Int    @map("variant_spec_id")
  value         String @db.VarChar(191)
  label         String @db.VarChar(255)
  sortOrder     Int    @default(0) @map("sort_order")

  spec VariantSpec @relation(fields: [variantSpecId], references: [id], onDelete: Cascade)

  @@unique([variantSpecId, value], map: "uq_variant_spec_option_value")
  @@index([variantSpecId], map: "idx_variant_spec_option_spec")
  @@map("variant_spec_options")
}

model VariantBucket {
  id            Int      @id @default(autoincrement())
  variantSpecId Int      @map("variant_spec_id")
  gt            Decimal? @db.Decimal(18, 6)
  lte           Decimal? @db.Decimal(18, 6)
  label         String   @db.VarChar(255)
  sortOrder     Int      @default(0) @map("sort_order")

  spec VariantSpec @relation(fields: [variantSpecId], references: [id], onDelete: Cascade)

  @@unique([variantSpecId, gt, lte], map: "uq_variant_buckets_range")
  @@index([variantSpecId], map: "idx_variant_buckets_spec")
  @@map("variant_buckets")
}

// =================== PRODUCT / VARIANT ===================
model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  slug        String   @unique @db.VarChar(191)
  brandId     Int      @map("brand_id")
  categoryId  Int      @map("category_id")
  description String?  @db.Text
  ratingAvg   Decimal  @default(0.00) @map("rating_avg") @db.Decimal(3, 2)
  ratingCount Int      @default(0) @map("rating_count")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  brand    Brand    @relation(fields: [brandId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  variants          Variant[]
  productSpecValues ProductSpecValue[]
  Review            Review[]
  Banner            Banner[]

  @@index([categoryId], map: "idx_products_category")
  @@index([brandId], map: "idx_products_brand")
  @@index([name])
  @@index([slug], map: "idx_products_slug")
  @@map("products")
}

model Variant {
  id             Int      @id @default(autoincrement())
  productId      Int      @map("product_id")
  color          String   @db.VarChar(100)
  price          Decimal? @db.Decimal(12, 2) // Giá bán hiện tại (có thể là giá đã giảm)
  compareAtPrice Decimal? @map("compare_at_price") @db.Decimal(12, 2) // Giá gốc để so sánh (giá bị gạch đi)
  stock          Int      @default(0)
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  lowStockThreshold Int? @map("low_stock_threshold")

  MediaVariant         MediaVariant[]
  product              Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantSpecValues    VariantSpecValue[]
  InventoryTransaction InventoryTransaction[]
  Device               Device[]
  CartItem             CartItem[]
  OrderItem            OrderItem[]

  @@index([productId])
  @@index([price])
  @@map("variants")
}

// =================== SPEC VALUES (tách riêng Product/Variant) ===================
model ProductSpecValue {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  specKey   String   @map("spec_key") @db.VarChar(191) // thường map sang ProductSpec.name
  label     String?  @db.VarChar(255)
  type      DataType
  unit      String?  @db.VarChar(64)

  // cột phục vụ lọc/sort nhanh (tuỳ chọn, giữ để tương thích & hiệu năng)
  stringValue  String?  @db.VarChar(255)
  numericValue Float?   @db.DoublePrecision
  booleanValue Boolean? @db.Boolean

  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  // optional: liên kết mềm tới ProductSpec qua specKey nếu cần đảm bảo toàn vẹn ở app layer
  ProductSpec ProductSpec[]

  @@index([productId])
  @@index([specKey])
  @@index([type])
  @@index([numericValue])
  @@map("product_spec_values")
}

model VariantSpecValue {
  id        Int      @id @default(autoincrement())
  variantId Int      @map("variant_id")
  specKey   String   @map("spec_key") @db.VarChar(191) // thường map sang VariantSpec.name
  label     String?  @db.VarChar(255)
  type      DataType
  unit      String?  @db.VarChar(64)

  // cột phục vụ lọc/sort nhanh (tuỳ chọn)
  stringValue  String?  @db.VarChar(255)
  numericValue Float?   @db.DoublePrecision
  booleanValue Boolean? @db.Boolean

  variant     Variant       @relation(fields: [variantId], references: [id], onDelete: Cascade)
  // optional: liên kết mềm tới VariantSpec qua specKey
  VariantSpec VariantSpec[]

  @@index([variantId])
  @@index([specKey])
  @@index([type])
  @@index([numericValue])
  @@map("variant_spec_values")
}

model Media {
  id        Int     @id @default(autoincrement())
  url       String  @db.VarChar(255)
  isPrimary Boolean @default(false) @map("is_primary")
  sortOrder Int     @default(0) @map("sort_order")

  MediaVariant MediaVariant[]

  @@map("media")
}

model MediaVariant {
  id        Int @id @default(autoincrement())
  mediaId   Int @map("media_id")
  variantId Int @map("variant_id")

  Media   Media   @relation(fields: [mediaId], references: [id])
  Variant Variant @relation(fields: [variantId], references: [id])

  @@unique([mediaId, variantId])
  @@map("media_variant")
}

/**
 * ==========================
 * COUPONS & CARTS
 * ==========================
 */
model Coupon {
  id         Int           @id @default(autoincrement())
  code       String        @unique @db.VarChar(50)
  type       CouponType
  value      Decimal       @db.Decimal(12, 2)
  minOrder   Decimal       @default(0.00) @map("min_order") @db.Decimal(12, 2)
  startsAt   DateTime?     @map("starts_at") @db.Timestamp(0)
  endsAt     DateTime?     @map("ends_at") @db.Timestamp(0)
  usageLimit Int?          @map("usage_limit")
  used       Int           @default(0)
  status     AccountStatus @default(active)
  categoryId Int?          @map("category_id")
  brandId    Int?          @map("brand_id")

  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  brand    Brand?    @relation(fields: [brandId], references: [id], onDelete: SetNull)

  @@index([startsAt])
  @@index([endsAt])
  @@index([code], map: "idx_coupons_code")
  @@map("coupons")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int @map("cart_id")
  variantId Int @map("variant_id")
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant Variant @relation(fields: [variantId], references: [id])

  @@unique([cartId, variantId], map: "uniq_cart_variant")
  @@map("cart_items")
}

/**
 * ==========================
 * ORDERS & PAYMENTS
 * ==========================
 */
model Order {
  id               Int             @id @default(autoincrement())
  userId           Int             @map("user_id")
  code             String          @unique @db.VarChar(50)
  status           OrderStatus     @default(pending)
  paymentAccountId Int?            @map("payment_account_id")
  paymentAccount   PaymentAccount? @relation(fields: [paymentAccountId], references: [id], onDelete: SetNull)
  paymentStatus    PaymentStatus   @default(pending) @map("payment_status")
  discount         Decimal         @default(0.00) @db.Decimal(12, 2)
  shippingFee      Decimal         @default(0.00) @map("shipping_fee") @db.Decimal(12, 2)
  subtotal         Decimal         @db.Decimal(12, 2)
  total            Decimal         @db.Decimal(12, 2)
  addressSnapshot  Json?           @map("address_snapshot")
  createdAt        DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  paidAt           DateTime?       @map("paid_at") @db.Timestamp(0)
  note             String?         @db.Text
  shippingProvider String?         @map("shipping_provider") @db.VarChar(100)
  shippingStatus   String?         @map("shipping_status") @db.VarChar(50)

  user         User                 @relation(fields: [userId], references: [id])
  items        OrderItem[]
  transactions PaymentTransaction[]
  rmas         Rma[]

  @@index([userId], map: "idx_orders_user")
  @@index([status], map: "idx_orders_status")
  @@index([createdAt], map: "idx_orders_created_at")
  @@index([paymentAccountId])
  @@map("orders")
}

model OrderItem {
  id           Int     @id @default(autoincrement())
  orderId      Int     @map("order_id")
  variantId    Int     @map("variant_id")
  price        Decimal @db.Decimal(12, 2)
  quantity     Int
  nameSnapshot String  @map("name_snapshot") @db.VarChar(255)

  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant      Variant       @relation(fields: [variantId], references: [id])
  orderDevices OrderDevice[]
  rmas         Rma[]

  @@index([orderId])
  @@map("order_items")
}

model PaymentTransaction {
  id                Int              @id @default(autoincrement())
  orderId           Int              @map("order_id")
  paymentMethodId   Int?             @map("payment_method_id")
  paymentMethod     PaymentMethod?   @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)
  providerPaymentId String?          @map("provider_payment_id") @db.VarChar(100)
  amount            Decimal          @db.Decimal(12, 2)
  status            PaymentTxnStatus @default(pending)
  createdAt         DateTime         @default(now()) @map("created_at") @db.Timestamp(0)

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status])
  @@index([paymentMethodId])
  @@map("payment_transactions")
}

/**
 * ==========================
 * REVIEWS & RMA
 * ==========================
 */
model Review {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  productId  Int      @map("product_id")
  stars      Int
  content    String?  @db.Text
  photosJson Json?    @map("photos_json")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  isActived  Boolean  @default(true) @map("is_actived")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "idx_reviews_product")
  @@index([userId], map: "idx_reviews_user")
  @@map("reviews")
}

model Rma {
  id           Int       @id @default(autoincrement())
  orderId      Int       @map("order_id")
  orderItemId  Int       @map("order_item_id")
  type         RmaType
  reason       String?   @db.Text
  status       RmaStatus @default(pending)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  evidenceJson Json?     @map("evidence_json")

  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@map("rmas")
}

/**
 * ==========================
 * STAFF & ROLES & PERMISSIONS
 * ==========================
 */
model Staff {
  id           Int           @id @default(autoincrement())
  email        String        @unique @db.VarChar(255)
  passwordHash String        @map("password_hash") @db.VarChar(255)
  name         String?       @db.VarChar(255)
  avatar       String?       @db.VarChar(255)
  status       AccountStatus @default(active)
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamp(0)

  staffRoles  StaffRole[]
  createdTxns InventoryTransaction[] @relation("TxnCreatedBy")

  @@map("staffs")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  staffRoles      StaffRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model StaffRole {
  staffId    Int      @map("staff_id")
  roleId     Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamp(0)

  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
  role  Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([staffId, roleId])
  @@map("staff_roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  key         String   @unique @map("key") @db.VarChar(100)
  name        String   @db.VarChar(255)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       Int      @map("role_id")
  permissionId Int      @map("permission_id")
  grantedAt    DateTime @default(now()) @map("granted_at") @db.Timestamp(0)

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

/**
 * ==========================
 * INVENTORY & DEVICES
 * ==========================
 */
model InventoryTransaction {
  id            Int              @id @default(autoincrement())
  variantId     Int              @map("variant_id")
  type          InventoryTxnType
  quantity      Int
  reason        String?          @db.Text
  referenceJson Json?            @map("reference_json")
  createdBy     Int?             @map("created_by")
  createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamp(0)

  variant Variant @relation(fields: [variantId], references: [id])
  staff   Staff?  @relation("TxnCreatedBy", fields: [createdBy], references: [id])

  @@map("inventory_transactions")
}

model Device {
  id        Int          @id @default(autoincrement())
  variantId Int          @map("variant_id")
  imei      String       @unique @db.VarChar(20)
  status    DeviceStatus @default(in_stock)
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamp(0)

  variant     Variant      @relation(fields: [variantId], references: [id], onDelete: Restrict)
  orderDevice OrderDevice?

  @@map("devices")
}

model OrderDevice {
  id          Int @id @default(autoincrement())
  orderItemId Int @map("order_item_id")
  deviceId    Int @unique @map("device_id")

  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  device    Device    @relation(fields: [deviceId], references: [id], onDelete: Restrict)

  @@map("order_devices")
}

// Model này định nghĩa các phương thức thanh toán mà cửa hàng cung cấp
model PaymentMethod {
  id           Int     @id @default(autoincrement())
  name         String  @db.VarChar(255) // Tên hiển thị cho người dùng, ví dụ: "Chuyển khoản Ngân hàng"
  code         String  @unique @db.VarChar(50) // Mã định danh cho logic, ví dụ: "bank_transfer", "momo"
  description  String? @db.Text // Hướng dẫn ngắn cho người dùng
  logoUrl      String? @map("logo_url") @db.VarChar(255) // URL logo của phương thức
  isActive     Boolean @default(true) @map("is_active") // Cho phép bật/tắt phương thức này
  displayOrder Int     @default(0) @map("display_order") // Thứ tự hiển thị trên trang thanh toán

  // Một phương thức có thể có nhiều tài khoản nhận tiền
  accounts           PaymentAccount[]
  PaymentTransaction PaymentTransaction[]

  @@map("payment_methods")
}

// Model này lưu chi tiết từng tài khoản nhận tiền của cửa hàng
model PaymentAccount {
  id              Int @id @default(autoincrement())
  paymentMethodId Int @map("payment_method_id")

  accountName   String  @map("account_name") @db.VarChar(255) // Tên chủ tài khoản
  accountNumber String  @map("account_number") @db.VarChar(50) // Số tài khoản hoặc SĐT ví
  bankName      String? @map("bank_name") @db.VarChar(100) // Tên ngân hàng (ví dụ: Vietcombank)
  bankBranch    String? @map("bank_branch") @db.VarChar(255) // Chi nhánh ngân hàng (tùy chọn)
  qrCodeUrl     String? @map("qr_code_url") @db.VarChar(255) // URL ảnh mã QR để thanh toán
  isActive      Boolean @default(true) @map("is_active") // Cho phép bật/tắt một tài khoản cụ thể

  // Liên kết tới phương thức thanh toán cha
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  Order         Order[]

  @@index([paymentMethodId])
  @@map("payment_accounts")
}
